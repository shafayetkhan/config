#!/usr/bin/env python
# This script allows to:
# - jump to a workspace
# - move a window to a workspace
# - jump to a window
#
# using ziberna's i3-py library: https://github.com/ziberna/i3-py
# depends: dmenu, i3
# syl20bnr, 2013
# License terms: http://sam.zoy.org/wtfpl/COPYING
import argparse
import string
import subprocess

import i3


# Arguments ------------------------------------------------------------------


ACTION_JUMP_TO_WORKSPACE = 'jump_to_wks'
ACTION_MOVE_TO_WORKSPACE = 'move_to_wks'
ACTION_JUMP_TO_WINDOW = 'jump_to_win'

DMENU_MAX_ROW = 32

PARSER = argparse.ArgumentParser(prog='dmenu_i3',
                                 version='%(prog)s version 0,1',
                                 description='''Description: A script sending
                                 messages to i3 in order to manage workspaces
                                 and windows via dmenu.''',
                                 epilog='Coded by syl20bnr (2013)')
PARSER.add_argument('-a', '--action',
                    choices=[ACTION_JUMP_TO_WORKSPACE,
                             ACTION_MOVE_TO_WORKSPACE,
                             ACTION_JUMP_TO_WINDOW],
                    required=True,
                    help='action to perform.')

arguments = PARSER.parse_args()


# Functions ------------------------------------------------------------------


def dispatch(args):
    ''' Dispatch processing depending on the action command line argument. '''
    if args.action == ACTION_JUMP_TO_WORKSPACE:
        action_jump_to_workspace()
    elif args.action == ACTION_MOVE_TO_WORKSPACE:
        action_move_to_workspace(args.window)
    elif args.action == ACTION_JUMP_TO_WINDOW:
        action_jump_to_window()


def get_workspace_list():
    ''' Return a list of all possible workspaces.
    For me its [0-9A-ZF1-F12]. '''
    return ([str(x) for x in range(0, 10)] +
            [x for x in string.uppercase] +
            [(lambda x: 'F' + str(x))(x) for x in range(1, 13)])


def action_jump_to_workspace():
    ''' Jump to the workspace chosen by the user using dmenu. '''
    dmenu = call_dmenu('Jump to workspace ->', 0)
    reply = dmenu.communicate(
        '\n'.join(get_workspace_list()).encode('utf-8'))[0]
    if reply:
        workspace_id = reply.decode('utf-8').rstrip()
        subprocess.Popen(["i3-msg", "workspace", workspace_id])


def action_move_to_workspace(win):
    ''' Move the specified windows ID to the workspace
    chosen by the user using dmenu.
    '''
    dmenu = call_dmenu('Move window to ->')
    return 0


def action_jump_to_window():
    ''' Jump to the window chosen by the user using dmenu. '''
    windows = get_windows()
    size = max([0, min([DMENU_MAX_ROW, len(windows)])])
    dmenu = call_dmenu('Jump to window ->', size)
    reply = dmenu.communicate(
        '\n'.join(windows).encode('utf-8'))[0]
    if reply:
        win = reply.decode('utf-8').rstrip()
        arg = '[con_id={0}] focus'.format(windows.get(win))
        subprocess.Popen(["i3-msg", arg])


def call_dmenu(title, nl=0):
    ''' Returns a dmenu process with the specified title and number
    of rows.
    '''
    dmenu = subprocess.Popen(
        ['/usr/bin/dmenu', '-i', '-l', str(nl), '-p', title,
         '-nb', '#002b36', '-nf', '#657b83',
         '-sb', '#859900', '-sf', '#eee8d5'],
        stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    return dmenu


def get_windows():
    ''' Returns a dictionary of key-value pairs of a window text and window id.
    Each window text is of format "[workspace] window title (instance number)"
    '''
    res = {}
    for ws in get_workspace_list():
        workspace = i3.filter(name=ws)
        if not workspace:
            continue
        workspace = workspace[0]
        windows = i3.filter(workspace, nodes=[])
        instances = {}
        # Adds windows and their ids to the clients dictionary
        for window in windows:
            win = '[%s] %s' % (workspace['name'], window['name'])
            # Appends an instance number if other instances are present
            if win in instances:
                instances[win] += 1
                win = '%s (%d)' % (win, instances[win])
            else:
                instances[win] = 1
            res[win] = window['id']
    return res

if __name__ == '__main__':
    dispatch(arguments)
